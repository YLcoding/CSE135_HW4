<!DOCTYPE HTML>
<html>
	<head>
		<title><%= title %></title>
		<script>
		window.onload = function() {
			let all_result = <%-JSON.stringify(results)%>;
			let path={};
			let loadTime = {};
			for(i=0;i<all_result.length;i++){
				let user_data=all_result[i];
				let key = user_data['path'];
				if (key in path) {
					path[key] +=1 ;
					loadTime[key].push({x: new Date(user_data['timestamp']), y: user_data['loadTime']});
				}
				else {
					loadTime[key] = [];
					loadTime[key].push({x: new Date(user_data['timestamp']), y: user_data['loadTime']});
					path[key]=1;
				}
			}
			let data = [];
			for (let key in loadTime) {
				data.push({
					type:"line",
					axisYType: "secondary",
					name: key,
					showInLegend: true,
					markerSize: 0,
					yValueFormatString: "#,###ms",
					dataPoints: loadTime[key]
				});
			}
			let chart = new CanvasJS.Chart("chartContainer", {
				animationEnabled: true,
				title: {
					text: "Loading Time"
				},
				axisX: {
					valueFormatString: "MMM YYYY"
				},
				axisY2: {
					title: "Loading Time",
					suffix: "ms"
				},
				toolTip: {
					shared: true
				},
				legend: {
					cursor: "pointer",
					verticalAlign: "top",
					horizontalAlign: "center",
					dockInsidePlotArea: true,
					itemclick: toogleDataSeries
				},
				data: data
			});
			function toogleDataSeries(e){
				if (typeof(e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
					e.dataSeries.visible = false;
				} else{
					e.dataSeries.visible = true;
				}
				chart.render();
			}
			chart.render();
			function dataURItoBlob(dataURI) {
			    // convert base64/URLEncoded data component to raw binary data held in a string
			    var byteString;
			    if (dataURI.split(',')[0].indexOf('base64') >= 0)
			        byteString = atob(dataURI.split(',')[1]);
			    else
			        byteString = unescape(dataURI.split(',')[1]);

			    // separate out the mime component
			    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

			    // write the bytes of the string to a typed array
			    var ia = new Uint8Array(byteString.length);
			    for (var i = 0; i < byteString.length; i++) {
			        ia[i] = byteString.charCodeAt(i);
			    }

			    return new Blob([ia], {type:mimeString});
			}
			var canvas = $("#chartContainer .canvasjs-chart-canvas").get(0);
			//console.log(dataURL);

			$("#exportButton").click(function(){
				var dataURL = canvas.toDataURL();
				var pdf = new jsPDF();
				pdf.addImage(dataURL, 'JPEG', 0, 0,200,80);
				pdf.save("download.pdf");
			});

			$("#shareButton").click(function(){
				$("#slack")[0].style.display="inline";
				var dataURL = canvas.toDataURL();
				var blob = dataURItoBlob(dataURL);
				var formData = new FormData();
				formData.append('file', blob, "Chart");
				formData.append('token', "xoxp-514909110179-523746889015-578760682850-581f5a84c1aee80cf8cbbe058eca87c9");
				formData.append('channels', $("#channal")[0].value);
				var xhr = new XMLHttpRequest();
				xhr.open('POST','https://slack.com/api/files.upload', true);

				 // Set up a handler for when the request finishes.
				xhr.onload = function () {
					if (xhr.status === 200) {
					// File(s) uploaded.
						$("#shareButton").innerHTML = 'Uploaded';
					} else {
						alert('An error occurred!');
					}
				};
				xhr.send(formData);
			});

			$("#emailButton").click(function(){
				$("#emailForm")[0].style.display="inline";
			});

			$("#emailSubmit").click(function(){
				event.preventDefault();
				var dataURL = canvas.toDataURL('image/jpeg',0.1);
				var myform=$("#emailForm");
				var params = myform.serializeArray().reduce(function(obj, item) {
					obj[item.name] = item.value;
					return obj;
				}, {});

				params['message']=JSON.stringify(data);
				// Change to your service ID, or keep using the default service
				var service_id = "gmail";

				var template_id = "imageshare";
				myform.find("button").text("Sending...");
				emailjs.send(service_id, template_id, params)
				.then(function(){
					alert("Sent!");
					myform.find("button").text("Send");
				}, function(err) {
					alert("Send email failed!\r\n Response:\n " + JSON.stringify(err));
					myform.find("button").text("Send");
				});
			});
		}
		</script>
		<script type="text/javascript" src="https://cdn.emailjs.com/sdk/2.3.2/email.min.js"></script>
		<script type="text/javascript">
			(function(){
				emailjs.init("user_B5uv3Wl3M2EomCD6FbtFz");
			})();
		</script>
	</head>
	<body>
		<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.3/jspdf.min.js"></script>
		<div id="chartContainer" style="height: 300px; width: 100%;"></div>
		<button id="exportButton" type="button">Export as PDF</button>
		<br/>
		<div id="slack" style="display:none">Slack Channal ID:<input type="text" id="channal" name="Slack Channal ID"></input></div>
		<button id="shareButton" type="button">Share via Slack</button>
		<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
		<br/>
		<form style="display:none" class="modal-content animate" action="#" id="emailForm">
			<div class="container">
				<label for="email"><b>email</b></label>
				<input type="text" placeholder="Enter Email" name="email" required>

				<label for="title"><b>title</b></label>
				<input type="text" placeholder="Enter Title" name="title" required>

				<button id="emailSubmit" type="submit">Send</button>
			</div>
		</form>
		<button id="emailButton" type="button">Share via Email</button>
	</body>
</html>
